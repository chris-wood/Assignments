##########################################################################
#
# File: printParagraph.py
# Author: Christopher Wood
# Description: Solution to project assignment 5-3.
#
##########################################################################

# For command line arguments and maximum integer
import sys

##########################################################################
#
# 5-3: TODO - discuss the paragraph thing
#
##########################################################################

def printMatrix(matrix, n):
	print "Matrix:"
	for i in range(0, n):
		for j in range(0, n):
			print str(matrix[i][j]) + " ",
		print ""
	print ""

def minSpaces(S, M):
	""" TODO
	"""
	n = len(S)
	
	# TODO
	spaces = list()
	inserts = list()
	for i in range(0, n):
		spaces.append(list())
		for j in range(0, n):
			spaces[i].append(0)
	
	# TODO
	for i in range(0, n - 1):
		spaces[i][i] = M - len(S[i])
	spaces[n-1][n-1] = 0

	# TODO
	for l in range(1, n):
		for i in range(0, n - l):
			j = i + l
			sum = 0
			for index in range(i, j + 1):
				sum = sum + len(S[index])
			numSpaces = M - j + i - sum
		
			# Check to see if a split is even necessary 
			if (numSpaces >= 0):
				spaces[i][j] = numSpaces
			else:
				spaces[i][j] = sys.maxint

			# Perform decision (do we even need to split?)
			maxVal = sys.maxint
			minIndex = -1
			for k in range(i, j):
				val = max(spaces[i][k], spaces[k+1][j])
				
				# If we found a new minimum in the partition, set the 
				# spaces table entry and log the split index for 
				# printing the paragraph based on the neatness criterion
				if (val < maxVal):
					maxVal = val
					minIndex = k
		
			# If the subproblem maximum is less than this one then set it
			if (maxVal < spaces[i][j]):
				spaces[i][j] = maxVal
				inserts.append = minIndex

	print inserts
	return spaces[0][n - 1]

# TODO
def printParagraph(S, M):
	""" TODO: describe
	"""


""" Run the printParagraph function.
	
	If the user enters a valid set of numbers, run it on that
	set, else run the program with some fixed numbers.
"""
if (len(sys.argv) > 2):
	words = list()
	lineSize = int(sys.argv[1])
	for i in range(2, len(sys.argv)):
		words.append(sys.argv[i])
	print "Minimum extra spaces: " + str(minSpaces(words, lineSize))

else:
	# Run the printParagraph routine with some random data
	print "Minimum extra spaces: " + str(minSpaces(["12", "def", "geh"], 6))

