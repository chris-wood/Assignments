// TODO: tests should be hard-coded into separate files that create instances of JacobiSeq and JacobiSmp,
// use the methods within for testing purposes.

/*
		    A = new double[3][3];
		    A[0][0] = 8.0;
		    A[0][1] = 2.0;
		    A[0][2] = 3.0;
		    A[1][0] = -1.0;
		    A[1][1] = 6.0;
		    A[1][2] = 4.0;
		    A[2][0] = 5.0;
		    A[2][1] = 1.0;
		    A[2][2] = 7.0;
		    
		    b = new double[3];
		    b[0] = -4.0;
		    b[1] = 5.0;
		    b[2] = 9.0;
		    
		    // algorithm implementation
		    int n = 3;
		    double[] x = solve(A, b, n);
		    Long end = System.currentTimeMillis();
		    
		    // int n = Matrix dimension
		    // double[] x = Array containing solution vector
		    // long t = Running time in milliseconds
		    if (n <= 100)
		        for (int i = 0; i < n; ++ i)
		            System.out.printf ("%d %g%n", i, x[i]);
		    else
		        {
		        for (int i = 0; i <= 49; ++ i)
		            System.out.printf ("%d %g%n", i, x[i]);
		        for (int i = n - 50; i < n; ++ i)
		            System.out.printf ("%d %g%n", i, x[i]);
		        }
		    System.out.printf ("%d msec%n", (end - start)); 
		    
		    A = new double[2][2];
		    A[0][0] = 2.0;
		    A[0][1] = 1.0;
		    A[1][0] = 5.0;
		    A[1][1] = 7.0;
		    
		    b = new double[2];
		    b[0] = 11;
		    b[1] = 13;
		    
		    // algorithm implementation
		    n = 2;
		    */